import re
import os
import inflection


class ProfanityFilter:
    def __init__(self, **kwargs):

        # If defined, use this instead of _censor_list
        self._custom_censor_list = kwargs.get('custom_censor_list', [])

        # Words to be used in conjunction with _censor_list
        self._extra_censor_list = kwargs.get('extra_censor_list', [])

        # What to be censored -- should not be modified by user
        self._censor_list = []

        # What to censor the words with 
        self._censor_char = "*"

        # Where to find the censored words
        self._BASE_DIR = os.path.abspath(os.path.dirname(__file__))
        self._words_file = os.path.join(self._BASE_DIR, 'wordlist.txt')
        self._white_list_file = os.path.join(self._BASE_DIR, 'white_list.txt')

        # Словарь для замены букв
        self._char_replacement_dict = {
            'а': ['а', 'a', '@'],
            'б': ['б', '6', 'b'],
            'в': ['в', 'b', 'v'],
            'г': ['г', 'r', 'g'],
            'д': ['д', 'd'],
            'е': ['е', 'e'],
            'ё' : ['ё', 'e'],
            'ж' : ['ж', 'zh', '*'],
            'з' : ['з', '3', 'z'],
            'и' : ['и', 'u', 'i'],
            'й' : ['й', 'u', 'i'],
            'к' : ['к', 'k', 'i{', '|{'],
            'л' : ['л', 'l', 'ji'],
            'м' : ['м', 'm'],
            'н' : ['н', 'h', 'n'],
            'о' : ['о', 'o', '0'],
            'п' : ['п', 'n', 'p'],
            'р' : ['р', 'r', 'p'],
            'с' : ['с', 'c', 's'],
            'т' : ['т', 'm', 't'],
            'у' : ['у', 'y', 'u'],
            'ф' : ['ф', 'f'],
            'х' : ['х', 'x', 'h' , '}{'],
            'ц' : ['ц', 'c', 'u,'],
            'ч' : ['ч', 'ch'],
            'ш' : ['ш', 'sh'],
            'щ' : ['щ', 'sch'],
            'ь' : ['ь', 'b'],
            'ы' : ['ы', 'bi'],
            'ъ' : ['ъ'],
            'э' : ['э', 'e'],
            'ю' : ['ю', 'io'],
            'я' : ['я', 'ya'],
        }
        
        self._load_words()
        self._load_white_list()

    def _load_words(self):
        """ Loads the list of profane words from file. """
        with open(self._words_file, 'r', encoding='utf-8') as f:
            self._censor_list = [line.strip() for line in f.readlines()]

    def _load_white_list(self):
        """ Loads the list of white-listed words from file. """
        with open(self._white_list_file, 'r', encoding='utf-8') as f:
            self._white_list = [line.strip() for line in f.readlines()]

    def define_words(self, word_list):
        """ Define a custom list of profane words. """
        self._custom_censor_list = word_list

    def append_words(self, word_list):
        """ Extends the profane word list with word_list """
        self._extra_censor_list.extend(word_list)

    def set_censor(self, character):
        """ Replaces the original censor character '*' with character """
        if isinstance(character, int):
            character = str(character)
        self._censor_char = character
        

    def _levenshtein_distance(self, a, b):
        """ Calculates the Levenshtein distance between a and b. """
        n, m = len(a), len(b)
        if n > m:
            a, b = b, a
            n, m = m, n

        current_row = range(n + 1)
        for i in range(1, m + 1):
            previous_row, current_row = current_row, [i] + [0] * n
            for j in range(1, n + 1):
                add, delete, change = previous_row[j] + 1, current_row[j - 1] + 1, previous_row[j - 1]
                if a[j - 1] != b[i - 1]:
                    change += 1
                current_row[j] = min(add, delete, change)

        return current_row[n]


    def get_custom_censor_list(self):
        """ Returns the list of custom profane words """
        return self._custom_censor_list

    def get_extra_censor_list(self):
        """ Returns the list of custom, additional, profane words """
        return self._extra_censor_list

    def get_profane_words(self):
        """ Gets all profane words """
        profane_words = []

        if self._custom_censor_list:
            profane_words = [w for w in self._custom_censor_list]  # Previous versions of Python don't have list.copy()
        else:
            profane_words = [w for w in self._censor_list]

        profane_words.extend(self._extra_censor_list)
        profane_words.extend([inflection.pluralize(word) for word in profane_words])
        profane_words = list(set(profane_words))

        return profane_words

    def restore_words(self):
        """ Clears all custom censor lists """
        self._load_white_list()
        self._custom_censor_list = []
        self._extra_censor_list = []

    def has_bad_word(self, text):
        """Returns True if text contains words similar to profanity, False otherwise."""
        # Получаем список ненормативных слов
        bad_words = self.get_profane_words()
        # Разбиваем входной текст на отдельные слова
        words = re.findall(r'\b\w+\b', text)
        
        for i in range(len(words)):
            word = words[i]
            for char in word:
                # Если символ - цифра
                if char.isdigit():
                    # Проверяем, является ли он частью замены буквы в словаре замен
                    for key, value_list in self._char_replacement_dict.items():
                        if char in value_list:
                            # Если да, то заменяем его на соответствующую букву
                            words[i] = word.replace(char, key)
                            break
        # Проходим по каждому ненормативному слову
        for word in bad_words:
            # Проходим по каждому слову в тексте
            for input_word in words:
                # Вычисляем расстояние Левенштейна между текущим словом и ненормативным словом
                dist = self._levenshtein_distance(input_word, word)
                # Если расстояние меньше или равно 25% длины ненормативного слова, считаем слова похожими
                if dist <= len(word) * 0.25:
                    return True  # Найдено совпадение
        return False
    
    def is_clean(self, input_text):
        """ Returns True if input_text doesn't contain any profane words, False otherwise. """
        return not self.has_bad_word(input_text)

    def is_profane(self, input_text):
        """ Returns True if input_text contains any profane words, False otherwise. """
        return self.has_bad_word(input_text)
